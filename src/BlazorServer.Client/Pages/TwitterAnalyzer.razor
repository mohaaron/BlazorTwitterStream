@page "/twitteranalyzer"
@using Microsoft.AspNetCore.SignalR.Client
@using Twitter.Models
@using Twitter.Services
@using Twitter.Services.Events
@using Twitter.Services.Hubs;
@using Twitter.Client.Shared;
@implements IDisposable
@implements IAsyncDisposable

<h3>Twitter Analyzer</h3>

@if (!connected)
{
    <p>Connecting to twitter.</p>
    return;
}

@if (connected)
{
    <TwitterTopTenHashtags TotalTweets="@_totalTweets" Top10Hashtags="@_top10Hashtags" />
}

@code {
    [Inject]
    private ITwitterStreamingService _twitterService { get; set; } = default!;
    [Inject]
    private ITweetAnalyzer _tweetAnalyzer { get; set; } = default!;
    [Inject]
    private NavigationManager Navigation { get; set; } = default!;

    private TwitterTopTenHashtags _topTenRef;
    private HubConnection? _hubConnection;
    private int _totalTweets = 0;
    private List<Hashtag> _top10Hashtags = new();
    private bool connected = false;

    protected async override Task OnInitializedAsync()
    {
        await StartTweetHub();
        //_twitterService.TweetPublished += OnTweetPublished;
        await _twitterService.StartStreamAsync();
    }

    private async Task StartTweetHub()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/tweethub")) // "https://localhost:65294/hubs/tweethub"
            .WithAutomaticReconnect()
            .Build();

        _hubConnection.On<Tweet>(nameof(ITweetHub.PublishTweet), (tweet) =>
        {
            _tweetAnalyzer.Add(tweet);
            _totalTweets = _tweetAnalyzer.GetTweetCount();
            _top10Hashtags = _tweetAnalyzer.GetTop10Hashtags();

            InvokeAsync(() => StateHasChanged());
        });

        await _hubConnection.StartAsync();
        connected = _hubConnection.State == HubConnectionState.Connected;
        if (connected)
            Console.WriteLine("connection started");
    }

    public bool IsConnected => _hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }

    private void OnTweetPublished(object? sender, TweetPublishedEventArgs args)
    {
        //_tweetAnalyzer.Add(args.Tweet);
        //_totalTweets = _tweetAnalyzer.GetTweetCount();
        //_top10Hashtags = _tweetAnalyzer.GetTop10Hashtags();
        //InvokeAsync(() => StateHasChanged());
    }

    public void Dispose()
    {
        //_twitterService.TweetPublished -= OnTweetPublished;
    }
}
