@page "/twitteranalyzer"
@using Microsoft.AspNetCore.SignalR.Client
@using Twitter.Models
@using Twitter.Services
@using Twitter.Services.Events
@using Twitter.Services.Hubs;
@using Twitter.Client.Shared.Components;
@implements IDisposable
@implements IAsyncDisposable

<h2>Twitter Analyzer</h2>

@if (!IsConnected)
{
    <Loading Message="Loading twitter stream" Completed="false" />
    return;
}

<h3>Twitter Top 10 Hashtags</h3>
<TwitterTopTenHashtags TotalTweets="@_totalTweets" Top10Hashtags="@_top10Hashtags" />

@code {
    [Inject]
    private ITwitterStreamingApiService _twitterService { get; set; } = default!;
    [Inject]
    private ITweetAnalyzer _tweetAnalyzer { get; set; } = default!;
    [Inject]
    private NavigationManager Navigation { get; set; } = default!;

    public bool IsConnected => _hubConnection?.State == HubConnectionState.Connected;
    private HubConnection? _hubConnection;
    private int _totalTweets = 0;
    private List<Hashtag> _top10Hashtags = new();

    protected async override Task OnInitializedAsync()
    {
        await StartTweetHub();

        await _twitterService.StartStreamAsync();
    }

    private async Task StartTweetHub()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/tweethub"))
            .WithAutomaticReconnect()
            .Build();

        _hubConnection.On<Tweet>(nameof(ITweetHub.PublishTweet), (tweet) =>
        {
            _tweetAnalyzer.Add(tweet);
            _totalTweets = _tweetAnalyzer.GetCount();
            _top10Hashtags = _tweetAnalyzer.GetTopHashtags(10);

            InvokeAsync(() => StateHasChanged()); // FIX: Remove this so only the child re-renders when paramaters change.
        });

        await _hubConnection.StartAsync();

        if (IsConnected)
            Console.WriteLine("connection started");
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            Console.WriteLine($"First Rendered {GetType()}");
            return;
        }

        Console.WriteLine($"Rendered {GetType()}");
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }

    public void Dispose()
    {
        //
    }
}
